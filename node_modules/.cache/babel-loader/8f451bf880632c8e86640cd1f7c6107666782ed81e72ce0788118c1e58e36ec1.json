{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"element\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\n\n/** Credit: https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/descendants/README.md\r\n *  Modified slightly to suit our purposes.\r\n */\n\n// To replace with .findIndex() once we stop IE11 support.\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction binaryFindElement(array, element) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start <= end) {\n    const middle = Math.floor((start + end) / 2);\n    if (array[middle].element === element) {\n      return middle;\n    }\n\n    // eslint-disable-next-line no-bitwise\n    if (array[middle].element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n  }\n  return start;\n}\nconst DescendantContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  DescendantContext.displayName = 'DescendantContext';\n}\nfunction usePrevious(value) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\nconst noop = () => {};\n\n/**\r\n * This hook registers our descendant by passing it into an array. We can then\r\n * search that array by to find its index when registering it in the component.\r\n * We use this for focus management, keyboard navigation, and typeahead\r\n * functionality for some components.\r\n *\r\n * The hook accepts the element node\r\n *\r\n * Our main goals with this are:\r\n *   1) maximum composability,\r\n *   2) minimal API friction\r\n *   3) SSR compatibility*\r\n *   4) concurrent safe\r\n *   5) index always up-to-date with the tree despite changes\r\n *   6) works with memoization of any component in the tree (hopefully)\r\n *\r\n * * As for SSR, the good news is that we don't actually need the index on the\r\n * server for most use-cases, as we are only using it to determine the order of\r\n * composed descendants for keyboard navigation.\r\n */\nexport function useDescendant(descendant) {\n  const [, forceUpdate] = React.useState();\n  const {\n    registerDescendant = noop,\n    unregisterDescendant = noop,\n    descendants = [],\n    parentId = null\n  } = React.useContext(DescendantContext);\n\n  // This will initially return -1 because we haven't registered the descendant\n  // on the first render. After we register, this will then return the correct\n  // index on the following render and we will re-register descendants\n  // so that everything is up-to-date before the user interacts with a\n  // collection.\n  const index = findIndex(descendants, item => item.element === descendant.element);\n  const previousDescendants = usePrevious(descendants);\n\n  // We also need to re-register descendants any time ANY of the other\n  // descendants have changed. My brain was melting when I wrote this and it\n  // feels a little off, but checking in render and using the result in the\n  // effect's dependency array works well enough.\n  const someDescendantsHaveChanged = descendants.some((newDescendant, position) => {\n    return previousDescendants && previousDescendants[position] && previousDescendants[position].element !== newDescendant.element;\n  });\n\n  // Prevent any flashing\n  useEnhancedEffect(() => {\n    if (descendant.element) {\n      registerDescendant(_extends({}, descendant, {\n        index\n      }));\n      return () => {\n        unregisterDescendant(descendant.element);\n      };\n    }\n    forceUpdate({});\n    return undefined;\n  }, [registerDescendant, unregisterDescendant, index, someDescendantsHaveChanged, descendant]);\n  return {\n    parentId,\n    index\n  };\n}\nexport function DescendantProvider(props) {\n  const {\n    children,\n    id\n  } = props;\n  const [items, set] = React.useState([]);\n  const registerDescendant = React.useCallback(_ref => {\n    let {\n        element\n      } = _ref,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n    set(oldItems => {\n      let newItems;\n      if (oldItems.length === 0) {\n        // If there are no items, register at index 0 and bail.\n        return [_extends({}, other, {\n          element,\n          index: 0\n        })];\n      }\n      const index = binaryFindElement(oldItems, element);\n      if (oldItems[index] && oldItems[index].element === element) {\n        // If the element is already registered, just use the same array\n        newItems = oldItems;\n      } else {\n        // When registering a descendant, we need to make sure we insert in\n        // into the array in the same order that it appears in the DOM. So as\n        // new descendants are added or maybe some are removed, we always know\n        // that the array is up-to-date and correct.\n        //\n        // So here we look at our registered descendants and see if the new\n        // element we are adding appears earlier than an existing descendant's\n        // DOM node via `node.compareDocumentPosition`. If it does, we insert\n        // the new element at this index. Because `registerDescendant` will be\n        // called in an effect every time the descendants state value changes,\n        // we should be sure that this index is accurate when descendent\n        // elements come or go from our component.\n\n        const newItem = _extends({}, other, {\n          element,\n          index\n        });\n\n        // If an index is not found we will push the element to the end.\n        newItems = oldItems.slice();\n        newItems.splice(index, 0, newItem);\n      }\n      newItems.forEach((item, position) => {\n        item.index = position;\n      });\n      return newItems;\n    });\n  }, []);\n  const unregisterDescendant = React.useCallback(element => {\n    set(oldItems => oldItems.filter(item => element !== item.element));\n  }, []);\n  const value = React.useMemo(() => ({\n    descendants: items,\n    registerDescendant,\n    unregisterDescendant,\n    parentId: id\n  }), [items, registerDescendant, unregisterDescendant, id]);\n  return /*#__PURE__*/_jsx(DescendantContext.Provider, {\n    value: value,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DescendantProvider.propTypes = {\n  children: PropTypes.node,\n  id: PropTypes.string\n} : void 0;","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","PropTypes","unstable_useEnhancedEffect","useEnhancedEffect","jsx","_jsx","findIndex","array","comp","i","length","binaryFindElement","element","start","end","middle","Math","floor","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","DescendantContext","createContext","process","env","NODE_ENV","displayName","usePrevious","value","ref","useRef","useEffect","current","noop","useDescendant","descendant","forceUpdate","useState","registerDescendant","unregisterDescendant","descendants","parentId","useContext","index","item","previousDescendants","someDescendantsHaveChanged","some","newDescendant","position","undefined","DescendantProvider","props","children","id","items","set","useCallback","_ref","other","oldItems","newItems","newItem","slice","splice","forEach","filter","useMemo","Provider","propTypes","node","string"],"sources":["D:/Desktop/front/G2-PetCemetery-Front/node_modules/@mui/lab/TreeView/descendants.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nconst _excluded = [\"element\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\r\n\r\n/** Credit: https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/descendants/README.md\r\n *  Modified slightly to suit our purposes.\r\n */\r\n\r\n// To replace with .findIndex() once we stop IE11 support.\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nfunction findIndex(array, comp) {\r\n  for (let i = 0; i < array.length; i += 1) {\r\n    if (comp(array[i])) {\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\nfunction binaryFindElement(array, element) {\r\n  let start = 0;\r\n  let end = array.length - 1;\r\n  while (start <= end) {\r\n    const middle = Math.floor((start + end) / 2);\r\n    if (array[middle].element === element) {\r\n      return middle;\r\n    }\r\n\r\n    // eslint-disable-next-line no-bitwise\r\n    if (array[middle].element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING) {\r\n      end = middle - 1;\r\n    } else {\r\n      start = middle + 1;\r\n    }\r\n  }\r\n  return start;\r\n}\r\nconst DescendantContext = /*#__PURE__*/React.createContext({});\r\nif (process.env.NODE_ENV !== 'production') {\r\n  DescendantContext.displayName = 'DescendantContext';\r\n}\r\nfunction usePrevious(value) {\r\n  const ref = React.useRef(null);\r\n  React.useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\nconst noop = () => {};\r\n\r\n/**\r\n * This hook registers our descendant by passing it into an array. We can then\r\n * search that array by to find its index when registering it in the component.\r\n * We use this for focus management, keyboard navigation, and typeahead\r\n * functionality for some components.\r\n *\r\n * The hook accepts the element node\r\n *\r\n * Our main goals with this are:\r\n *   1) maximum composability,\r\n *   2) minimal API friction\r\n *   3) SSR compatibility*\r\n *   4) concurrent safe\r\n *   5) index always up-to-date with the tree despite changes\r\n *   6) works with memoization of any component in the tree (hopefully)\r\n *\r\n * * As for SSR, the good news is that we don't actually need the index on the\r\n * server for most use-cases, as we are only using it to determine the order of\r\n * composed descendants for keyboard navigation.\r\n */\r\nexport function useDescendant(descendant) {\r\n  const [, forceUpdate] = React.useState();\r\n  const {\r\n    registerDescendant = noop,\r\n    unregisterDescendant = noop,\r\n    descendants = [],\r\n    parentId = null\r\n  } = React.useContext(DescendantContext);\r\n\r\n  // This will initially return -1 because we haven't registered the descendant\r\n  // on the first render. After we register, this will then return the correct\r\n  // index on the following render and we will re-register descendants\r\n  // so that everything is up-to-date before the user interacts with a\r\n  // collection.\r\n  const index = findIndex(descendants, item => item.element === descendant.element);\r\n  const previousDescendants = usePrevious(descendants);\r\n\r\n  // We also need to re-register descendants any time ANY of the other\r\n  // descendants have changed. My brain was melting when I wrote this and it\r\n  // feels a little off, but checking in render and using the result in the\r\n  // effect's dependency array works well enough.\r\n  const someDescendantsHaveChanged = descendants.some((newDescendant, position) => {\r\n    return previousDescendants && previousDescendants[position] && previousDescendants[position].element !== newDescendant.element;\r\n  });\r\n\r\n  // Prevent any flashing\r\n  useEnhancedEffect(() => {\r\n    if (descendant.element) {\r\n      registerDescendant(_extends({}, descendant, {\r\n        index\r\n      }));\r\n      return () => {\r\n        unregisterDescendant(descendant.element);\r\n      };\r\n    }\r\n    forceUpdate({});\r\n    return undefined;\r\n  }, [registerDescendant, unregisterDescendant, index, someDescendantsHaveChanged, descendant]);\r\n  return {\r\n    parentId,\r\n    index\r\n  };\r\n}\r\nexport function DescendantProvider(props) {\r\n  const {\r\n    children,\r\n    id\r\n  } = props;\r\n  const [items, set] = React.useState([]);\r\n  const registerDescendant = React.useCallback(_ref => {\r\n    let {\r\n        element\r\n      } = _ref,\r\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\r\n    set(oldItems => {\r\n      let newItems;\r\n      if (oldItems.length === 0) {\r\n        // If there are no items, register at index 0 and bail.\r\n        return [_extends({}, other, {\r\n          element,\r\n          index: 0\r\n        })];\r\n      }\r\n      const index = binaryFindElement(oldItems, element);\r\n      if (oldItems[index] && oldItems[index].element === element) {\r\n        // If the element is already registered, just use the same array\r\n        newItems = oldItems;\r\n      } else {\r\n        // When registering a descendant, we need to make sure we insert in\r\n        // into the array in the same order that it appears in the DOM. So as\r\n        // new descendants are added or maybe some are removed, we always know\r\n        // that the array is up-to-date and correct.\r\n        //\r\n        // So here we look at our registered descendants and see if the new\r\n        // element we are adding appears earlier than an existing descendant's\r\n        // DOM node via `node.compareDocumentPosition`. If it does, we insert\r\n        // the new element at this index. Because `registerDescendant` will be\r\n        // called in an effect every time the descendants state value changes,\r\n        // we should be sure that this index is accurate when descendent\r\n        // elements come or go from our component.\r\n\r\n        const newItem = _extends({}, other, {\r\n          element,\r\n          index\r\n        });\r\n\r\n        // If an index is not found we will push the element to the end.\r\n        newItems = oldItems.slice();\r\n        newItems.splice(index, 0, newItem);\r\n      }\r\n      newItems.forEach((item, position) => {\r\n        item.index = position;\r\n      });\r\n      return newItems;\r\n    });\r\n  }, []);\r\n  const unregisterDescendant = React.useCallback(element => {\r\n    set(oldItems => oldItems.filter(item => element !== item.element));\r\n  }, []);\r\n  const value = React.useMemo(() => ({\r\n    descendants: items,\r\n    registerDescendant,\r\n    unregisterDescendant,\r\n    parentId: id\r\n  }), [items, registerDescendant, unregisterDescendant, id]);\r\n  return /*#__PURE__*/_jsx(DescendantContext.Provider, {\r\n    value: value,\r\n    children: children\r\n  });\r\n}\r\nprocess.env.NODE_ENV !== \"production\" ? DescendantProvider.propTypes = {\r\n  children: PropTypes.node,\r\n  id: PropTypes.string\r\n} : void 0;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}